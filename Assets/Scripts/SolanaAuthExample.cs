using System;
using System.Threading.Tasks;
using Beamable;
using Beamable.Api.Autogenerated.Models;
using Solana.Unity.SDK;
using Solana.Unity.Wallet.Bip39;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using Account = Solana.Unity.Wallet.Account;

public class SolanaAuthExample : MonoBehaviour
{
//     private BeamContext _ctx;
//
//     [SerializeField] private Button _connectWalletButton;
//     [SerializeField] private Button _attachButton;
//
//     [Header("UI")] [SerializeField] private GameObject _accountGroup;
//
//     [SerializeField] private TextMeshProUGUI _publicKey;
//
//     private readonly PhantomWalletOptions _phantomWalletOptions = new() { appMetaDataUrl = "https://beamable.com" };
//
//     private Account _account;
//
//     private Account Account
//     {
//         set
//         {
//             _account = value;
//             Refresh();
//         }
//     }
//
//     private bool LoggedIn => _account != null;
//
//     public async void Start()
//     {
//         Refresh();
//
//         _ctx = BeamContext.Default;
//         await _ctx.OnReady;
//
//         _connectWalletButton.onClick.AddListener(OnConnectClicked);
//         _attachButton.onClick.AddListener(OnAttachClicked);
//     }
//
//     private void Refresh()
//     {
//         _connectWalletButton.interactable = !LoggedIn;
//         _attachButton.interactable = LoggedIn;
//
//         _accountGroup.SetActive(LoggedIn);
//         _publicKey.text = LoggedIn ? _account.PublicKey.Key : String.Empty;
//     }
//
//     private async void OnConnectClicked()
//     {
//         await Login();
//     }
//
//     private async void OnAttachClicked()
//     {
//         _attachButton.interactable = false;
//         string providerAddress = "SolanaAuthProviderMS/Authorize";
//
//         var authService = _ctx.Api.AuthService;
//         AttachExternalIdentityResponse challengedResponse =
//             await authService.AttachIdentity(_account.PublicKey.Key, providerAddress);
//
//         if (!string.IsNullOrEmpty(challengedResponse.challenge_token))
//         {
//             string challengeToken = authService.ParseChallengeToken(challengedResponse.challenge_token);
//             byte[] challengeTokenBytes = Convert.FromBase64String(challengeToken);
//             byte[] signature = _account.Sign(challengeTokenBytes);
//
//             ChallengeSolution solution = new ChallengeSolution
//             {
//                 challenge_token = challengedResponse.challenge_token, solution = Convert.ToBase64String(signature)
//             };
//
//             AttachExternalIdentityResponse finalResponse =
//                 await authService.AttachIdentity(_account.PublicKey.Key, providerAddress, solution);
//
//             _attachButton.interactable = true;
//         }
//     }
//
//     public async Task Login()
//     {
// #if UNITY_EDITOR
//         Account = await LoginInGame();
// #elif (UNITY_IOS || UNITY_ANDROID || UNITY_WEBGL)
// 		Account = await LoginPhantom();
// #endif
//     }
//
//     private async Task<Account> LoginPhantom()
//     {
//         var phantomWallet = new PhantomWallet(_phantomWalletOptions, RpcCluster.DevNet, string.Empty, true);
//         return await phantomWallet.Login();
//     }
//
//     private async Task<Account> LoginInGame()
//     {
//         var inGameWallet = new InGameWallet(RpcCluster.DevNet, null, true);
//
//         var newMnemonic = new Mnemonic(WordList.English, WordCount.Twelve);
//         return await inGameWallet.Login("1234") ?? await inGameWallet.CreateAccount(newMnemonic.ToString(), "1234");
//     }
}